apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
        - name: postgresql
          image: "{{ .Values.global.postgresql.image }}"
          env:
            - name: POSTGRES_USER
              value: "{{ .Values.global.postgresql.username }}"
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.global.postgresql.password }}"
            - name: POSTGRES_DB
              value: "{{ .Values.global.postgresql.database }}"
          ports:
            - containerPort: {{ .Values.global.postgresql.service.port }}
          volumeMounts:
            - name: init-sql
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: init-sql
          configMap:
            name: init-sql-configmap

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-sql-configmap
data:
  init_up.sql: |
    -- Your SQL initialization commands go here
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    
    -- Create the exchange_rates table
    CREATE TABLE exchange_rates (
        uuid UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        currency VARCHAR(255) NOT NULL,
        rate FLOAT8 NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Create an index on the currency column
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE tablename = 'exchange_rates' AND indexname = 'idx_currency') THEN
            CREATE INDEX idx_currency ON exchange_rates(currency);
        END IF;
    END
    $$;

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.global.postgresql.service.port }}
      targetPort: {{ .Values.global.postgresql.service.port }}
  selector:
    app: postgresql